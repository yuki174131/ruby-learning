# 改行ごとにメソッドが実行される
'1'.to_s # => "1"
nil.to_s # => ""
10.to_s(16) # => "a"

# セミコロンを使って、3つの分を1行に押し込める（使用頻度低）
1.to_s; nil.to_s; 10.to_s(16)

# バックスラッシュを使うと、文がまだ続くことを明示的に示せる（引数の括弧は省略することができる）
10.to_s \
16 # => "a"

# %q! !はシングルクォートで囲んだことと同じになる
puts %q!He said, "Don't speak."! #=> He said, "Don't speak."

# %Q! !はダブルクォートで囲んだことと同じになる（改行文字や式展開が使える）%! !も同様
something = "Hello"
puts %Q! He said, "#{something}"! #=> He said, "Hello"

# ％Q! !の「!」は「?, ^, <, {」などの区切り文字でも利用可能
puts %q?He said, "Don't speak."? #=> He said, "Don't speak."

# 複数行にわたる長い文字列を作成する際は、ヒアドキュメントを使ったほうがスッキリ書ける。
# 識別子は自由につけれる（以下の例はTEXT 記述する文字列の中に含まれない文字列を使う必要あり）
a = <<TEXT
ヒアドキュメントです。
複数行にわたる長い文字列を作成する際に便利です。
TEXT
puts a

def some_method
    <<-TEXT
これはヒアドキュメントです。
<<-を使うと最後の識別子をインデントさせることができます
    TEXT

    <<~TEXT
        これはヒアドキュメントです。
        <<~を使うと内部文字列のインデント部分が無視されます
    TEXT

    # ヒアドキュメントの中では式展開が可能
    name = 'Alice'
    <<~TEXT
        ようこそ#{name}さん
    TEXT

    # 識別子をシングルクォートで囲むと式展開が無効
    <<~'TEXT'
    ようこそ#{name}さん
    TEXT
end

# ヒアドキュメントを引数として渡せる。（開始ラベルの「<<識別子」は一つの式とみなされる）
a = 'Ruby'
a.prepend(<<TEXT)
Java
PHP
TEXT
puts a
#=> Java
# PHP
# Ruby

# sprintifメソッドを使うと、指定されたフォーマットの文字列を作成できる
# 少数第３位まで数字を表示する文字列を作成するコード
sprintif('%0.3f', 1,2) #=>"1.200"

# 表示したいオブジェクトを複数渡せる
sprintif('%0.3f + %0.3f', 1.2, 0.48) #=> "1.200 + 0.480"
# フォーマット文字列 % 表示したいオブジェクト  という記法も可能
'%0.3f + %0.3f' % [1.2, 0.48] #=> "1.200 + 0.480"

# 数値を文字列に変換
123.to_s

#配列を連結して一つの文字列
[10, 20, 30].join #=>"102030"

# *演算子を使って文字列を繰り返す
"Hi" * 10 #=>Hi!Hi!Hi!Hi!Hi!Hi!Hi!Hi!Hi!Hi!
